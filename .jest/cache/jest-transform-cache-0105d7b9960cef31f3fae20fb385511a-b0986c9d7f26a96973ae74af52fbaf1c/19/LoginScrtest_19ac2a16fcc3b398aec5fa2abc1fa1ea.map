{"file":"/Users/sakthivel/Documents/GitHub/MyAwesomeProject/Container/LoginScr.test.tsx","mappings":";;;;;AAAA,gDAA0B;AAC1B,wDAA+B;AAC/B,4EAA0C;AAE1C,QAAQ,CAAC,qBAAqB,EAAE;IAC5B,EAAE,CAAC,mBAAmB,EAAE;QACtB,IAAM,IAAI,GAAG,6BAAQ,CAAC,MAAM,CAC1B,8BAAC,kBAAK,OAAE,CACT,CAAC,MAAM,EAAE,CAAC;QACX,MAAM,CAAC,IAAI,CAAC,CAAC,eAAe,EAAE,CAAC;IACjC,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC;AAEL,kDAAkD;AAClD,kCAAkC;AAClC,uEAAuE;AACvE,2DAA2D;AAC3D,qEAAqE;AACrE,2DAA2D;AAC3D,SAAS;AACT,KAAK;AACL,2CAA2C;AAC3C,8CAA8C;AAC9C,uEAAuE;AACvE,2DAA2D;AAC3D,qEAAqE;AACrE,SAAS;AACT,KAAK;AACL,4BAA4B;AAC5B,gDAAgD;AAChD,qDAAqD;AACrD,yDAAyD;AACzD,UAAU;AACV,MAAM;AAEN,4CAA4C;AAE5C,IAAI,WAAW,GAAG,UAAS,IAAQ,EAAC,OAAW;IAC3C,QAAQ,CAAA;IACZ,IAAI,MAAM,GAAG,SAAS,CAAA;IACtB,KAAK,IAAI,IAAI,IAAI,IAAI,CAAC,QAAQ,EAAC;QAE3B,KAAK,IAAI,OAAO,IAAI,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,QAAQ,EAAC;YACjD,IAAI,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC,KAAK,CAAC,MAAM,IAAI,OAAO,EAAC;gBAC9D,MAAM,GAAG,IAAI,CAAA;aAChB;SACJ;KACA;IACD,OAAO,MAAM,CAAA;AACb,CAAC,CAAA;AACD,EAAE,CAAE,aAAa,EAAE;IACnB,IAAI,IAAI,GAAG,6BAAQ,CAAC,MAAM,CAAC,8BAAC,kBAAK,OAAE,CAAC,CAAC,MAAM,EAAE,CAAA;IAC7C,MAAM,CAAC,WAAW,CAAC,IAAI,EAAC,OAAO,CAAC,CAAC,CAAC,WAAW,EAAE,CAAA;AAC/C,CAAC,CAAC,CAAA;AAGF,oBAAoB;AAEpB,IAAI,gBAAgB,GAAG,UAAS,IAAQ,EAAC,OAAW;IAChD,QAAQ,CAAA;IAEZ,IAAI,MAAM,GAAG,SAAS,CAAA;IACtB,KAAK,IAAI,IAAI,IAAI,IAAI,CAAC,QAAQ,EAAC;QAE3B,KAAK,IAAI,OAAO,IAAI,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,QAAQ,EAAC;YAEjD,IAAI,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC,KAAK,CAAC,WAAW,IAAI,OAAO,EAAC;gBACnE,MAAM,GAAG,IAAI,CAAA;aAChB;SACJ;KACA;IACD,OAAO,MAAM,CAAA;AACb,CAAC,CAAA;AACD,EAAE,CAAE,mBAAmB,EAAE;IACzB,IAAI,IAAI,GAAG,6BAAQ,CAAC,MAAM,CAAC,8BAAC,kBAAK,OAAE,CAAC,CAAC,MAAM,EAAE,CAAA;IAC7C,MAAM,CAAC,gBAAgB,CAAC,IAAI,EAAC,OAAO,CAAC,CAAC,CAAC,WAAW,EAAE,CAAA;AACpD,CAAC,CAAC,CAAA","names":[],"sources":["/Users/sakthivel/Documents/GitHub/MyAwesomeProject/Container/LoginScr.test.tsx"],"sourcesContent":["import React from 'react';\nimport Login from './LoginScr';\nimport renderer from 'react-test-renderer'\n\ndescribe('SnapShot login Page', () => {\n    it('renders correctly', () => {\n      const tree = renderer.create(\n        <Login/>\n      ).toJSON();\n      expect(tree).toMatchSnapshot();\n    });\n  });\n\n// describe('Test case for testing login', () => {\n//     test('email check', () => {\n//         const instanceOf = renderer.create(<Login />).getInstance();\n//         instanceOf.handleInputChange(\"sakthi@gmail.com\")\n//         expect(instanceOf.state.email).toEqual(\"sakthi@gmail.com\")\n//         expect(instanceOf.state.email).not.toEqual(null)\n//     })\n// })\n// describe('Test case text input', () => {\n//     test('email valid email check', () => {\n//         const instanceOf = renderer.create(<Login />).getInstance();\n//         instanceOf.handleInputChange(\"sakthi@gmail.com\")\n//         expect(instanceOf.state.email).toEqual(\"sakthi@gmail.com\")\n//     })\n// })\n// describe('Hello', () => {\n//     it('displays the passed-in name', () => {\n//         const { queryByText } = render(<Login />);\n//         expect(queryByText('WelCome')).not.toBeNull();\n//     });\n// });\n\n// Finding Element is present or not present\n\nlet findElement = function(tree:any,element:any){\n    debugger\nvar result = undefined\nfor (let node in tree.children){\n    \n    for (let newnode in tree.children[node].children){\n    if (tree.children[node].children[newnode].props.testID == element){\n        result = true\n    }\n}\n}\nreturn result\n}\nit (\"findElement\", () =>{\nlet tree = renderer.create(<Login/>).toJSON()\nexpect(findElement(tree,\"email\")).toBeDefined()\n})\n\n\n// Check PlaceHolder\n\nlet checkPlaceHolder = function(tree:any,element:any){\n    debugger\n\nvar result = undefined\nfor (let node in tree.children){\n    \n    for (let newnode in tree.children[node].children){\n        \n    if (tree.children[node].children[newnode].props.placeholder == element){\n        result = true\n    }\n}\n}\nreturn result\n}\nit (\"Check PlaceHolder\", () =>{\nlet tree = renderer.create(<Login/>).toJSON()\nexpect(checkPlaceHolder(tree,\"Email\")).toBeDefined()\n})"],"version":3}