ad86acbb9841c32f57a5f0826c6c1dbc
'use strict';

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

var Platform = require('../Utilities/Platform');

var React = require('react');

var StyleSheet = require('../StyleSheet/StyleSheet');

var Text = require('../Text/Text');

var TouchableNativeFeedback = require('./Touchable/TouchableNativeFeedback');

var TouchableOpacity = require('./Touchable/TouchableOpacity');

var View = require('./View/View');

var invariant = require('invariant');

var Button = function (_React$Component) {
  (0, _inherits2.default)(Button, _React$Component);

  var _super = _createSuper(Button);

  function Button() {
    (0, _classCallCheck2.default)(this, Button);
    return _super.apply(this, arguments);
  }

  (0, _createClass2.default)(Button, [{
    key: "render",
    value: function render() {
      var _this$props = this.props,
          accessibilityLabel = _this$props.accessibilityLabel,
          color = _this$props.color,
          onPress = _this$props.onPress,
          touchSoundDisabled = _this$props.touchSoundDisabled,
          title = _this$props.title,
          hasTVPreferredFocus = _this$props.hasTVPreferredFocus,
          nextFocusDown = _this$props.nextFocusDown,
          nextFocusForward = _this$props.nextFocusForward,
          nextFocusLeft = _this$props.nextFocusLeft,
          nextFocusRight = _this$props.nextFocusRight,
          nextFocusUp = _this$props.nextFocusUp,
          disabled = _this$props.disabled,
          testID = _this$props.testID;
      var buttonStyles = [styles.button];
      var textStyles = [styles.text];

      if (color) {
        if (Platform.OS === 'ios') {
          textStyles.push({
            color: color
          });
        } else {
          buttonStyles.push({
            backgroundColor: color
          });
        }
      }

      var accessibilityState = {};

      if (disabled) {
        buttonStyles.push(styles.buttonDisabled);
        textStyles.push(styles.textDisabled);
        accessibilityState.disabled = true;
      }

      invariant(typeof title === 'string', 'The title prop of a Button must be a string');
      var formattedTitle = Platform.OS === 'android' ? title.toUpperCase() : title;
      var Touchable = Platform.OS === 'android' ? TouchableNativeFeedback : TouchableOpacity;
      return React.createElement(Touchable, {
        accessibilityLabel: accessibilityLabel,
        accessibilityRole: "button",
        accessibilityState: accessibilityState,
        hasTVPreferredFocus: hasTVPreferredFocus,
        nextFocusDown: nextFocusDown,
        nextFocusForward: nextFocusForward,
        nextFocusLeft: nextFocusLeft,
        nextFocusRight: nextFocusRight,
        nextFocusUp: nextFocusUp,
        testID: testID,
        disabled: disabled,
        onPress: onPress,
        touchSoundDisabled: touchSoundDisabled
      }, React.createElement(View, {
        style: buttonStyles
      }, React.createElement(Text, {
        style: textStyles,
        disabled: disabled
      }, formattedTitle)));
    }
  }]);
  return Button;
}(React.Component);

var styles = StyleSheet.create({
  button: Platform.select({
    ios: {},
    android: {
      elevation: 4,
      backgroundColor: '#2196F3',
      borderRadius: 2
    }
  }),
  text: (0, _extends2.default)({
    textAlign: 'center',
    margin: 8
  }, Platform.select({
    ios: {
      color: '#007AFF',
      fontSize: 18
    },
    android: {
      color: 'white',
      fontWeight: '500'
    }
  })),
  buttonDisabled: Platform.select({
    ios: {},
    android: {
      elevation: 0,
      backgroundColor: '#dfdfdf'
    }
  }),
  textDisabled: Platform.select({
    ios: {
      color: '#cdcdcd'
    },
    android: {
      color: '#a1a1a1'
    }
  })
});
module.exports = Button;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,