34a72c50fa01cc79f2e315c6d19151c5
"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var react_1 = __importDefault(require("react"));
var LoginScr_1 = __importDefault(require("./LoginScr"));
var react_test_renderer_1 = __importDefault(require("react-test-renderer"));
var enzyme_1 = require("enzyme");
var sinon_1 = __importDefault(require("sinon"));
var Enzyme = require('enzyme');
var EnzymeAdapter = require('enzyme-adapter-react-16');
// Setup enzyme's react adapter
Enzyme.configure({ adapter: new EnzymeAdapter() });
describe('SnapShot login Page', function () {
    it('renders correctly', function () {
        var tree = react_test_renderer_1.default.create(react_1.default.createElement(LoginScr_1.default, null)).toJSON();
        expect(tree).toMatchSnapshot();
    });
});
// Finding Email text Field is present
var findElement = function (tree, element) {
    debugger;
    var result = undefined;
    for (var node in tree.children) {
        for (var newnode in tree.children[node].children) {
            if (tree.children[node].children[newnode].props.testID == element) {
                result = true;
            }
        }
    }
    return result;
};
it("Check Email Text filed is present", function () {
    var tree = react_test_renderer_1.default.create(react_1.default.createElement(LoginScr_1.default, null)).toJSON();
    expect(findElement(tree, "email")).toBeDefined();
});
// Validate the Placeholder of the email text field
var checkPlaceHolder = function (tree, element) {
    debugger;
    var result = undefined;
    for (var node in tree.children) {
        for (var newnode in tree.children[node].children) {
            if (tree.children[node].children[newnode].props.placeholder == element) {
                result = true;
            }
        }
    }
    return result;
};
it("Validate the Placeholder of the email text field", function () {
    var tree = react_test_renderer_1.default.create(react_1.default.createElement(LoginScr_1.default, null)).toJSON();
    console.log("get details", tree);
    expect(checkPlaceHolder(tree, "Email")).toBeDefined();
});
// Finding Password text Field is present
var findPassWordElement = function (tree, element) {
    debugger;
    var result = undefined;
    for (var node in tree.children) {
        for (var newnode in tree.children[node].children) {
            if (tree.children[node].children[newnode].props.testID == element) {
                result = true;
            }
        }
    }
    return result;
};
it("Finding Password text Field is present", function () {
    var tree = react_test_renderer_1.default.create(react_1.default.createElement(LoginScr_1.default, null)).toJSON();
    expect(findPassWordElement(tree, "password")).toBeDefined();
});
// Validate the placeHolder of the password text field
var checkPasswordPlaceHolder = function (tree, element) {
    debugger;
    var result = undefined;
    for (var node in tree.children) {
        for (var newnode in tree.children[node].children) {
            if (tree.children[node].children[newnode].props.placeholder == element) {
                result = true;
            }
        }
    }
    return result;
};
it("Validate the placeHolder of the password text field", function () {
    var tree = react_test_renderer_1.default.create(react_1.default.createElement(LoginScr_1.default, null)).toJSON();
    expect(checkPasswordPlaceHolder(tree, "Password")).toBeDefined();
});
// Check Weather the button press action Performed
it('Check Weather the button press action Performed', function () {
    var wrapper = enzyme_1.shallow(react_1.default.createElement(LoginScr_1.default, null));
    wrapper.dive().find("[testID='refreshButton']").simulate("press");
});
it('should render without throwing an error', function () {
    var wrapper = enzyme_1.shallow(react_1.default.createElement(LoginScr_1.default, null));
    wrapper.dive().find("[testID='refreshButton']").simulate("press");
});
it('Button Click Check', function () {
    var refreshData = sinon_1.default.spy();
    var wrapper = enzyme_1.shallow(react_1.default.createElement(LoginScr_1.default, null));
    wrapper.dive().find("[testID='refreshButton']").simulate("press");
    expect(refreshData).toHaveBeenCalledTimes(1);
});
//   it('should render without throwing an error', function() {
//     const wrapper = shallow(<Login />);
//     // console.log("should render without throwing an error",wrapper)
//     let instanceOf = wrapper.instance()
//     wrapper.instance()["refreshData"] = jest.fn()
//     // const refreshData = jest.spyOn(instanceOf, "refreshData")
//     wrapper.dive().find("[testID='refreshButton']").simulate("press");
//       expect(wrapper.instance()["refreshData"]).toHaveBeenCalledTimes(1);
//   });
// // Button click Action
// it('increments counter after 0.5s', async () => {
//     const { getByTestId, getByText } = render(<Login/>); 
//     fireEvent.click(getByTestId('button-up'))
//     const counter = await waitForElement(() => getByText('1')) 
//     expect(counter).tohavetext
//   });
// describe('Email State Check', () => {
//     test('It Should Change the state of the email', () => {
//         const instanceOf = renderer.create(<Login/>).getInstance();
//         if (instanceOf !== null){
//         instanceOf.handleInputChange("sakthi@gmail.com")
//         expect(instanceOf.state.email).toEqual("sakthi@gmail.com")
//         expect(instanceOf.state.email).not.toEqual(null)
//         }
//     })
// })
// describe('Test case text input', () => {
//     test('email valid email check', () => {
//         const instanceOf = renderer.create(<Login />).getInstance();
//         instanceOf.handleInputChange("sakthi@gmail.com")
//         expect(instanceOf.state.email).toEqual("sakthi@gmail.com")
//     })
// })
// describe('Hello', () => {
//     it('displays the passed-in name', () => {
//         const { queryByText } = render(<Login />);
//         expect(queryByText('WelCome')).not.toBeNull();
//     });
// });
//# sourceMappingURL=data:application/json;charset=utf-8;base64,