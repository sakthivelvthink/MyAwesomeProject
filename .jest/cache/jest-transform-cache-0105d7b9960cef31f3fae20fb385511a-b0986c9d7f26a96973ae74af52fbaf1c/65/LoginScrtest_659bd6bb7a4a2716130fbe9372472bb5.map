{"file":"/Users/sakthivel/Documents/GitHub/MyAwesomeProject/Container/LoginScr.test.tsx","mappings":";;;;;AAAA,gDAA0B;AAG1B,wDAA+B;AAC/B,4EAA0C;AAC1C,IAAM,MAAM,GAAG,OAAO,CAAC,QAAQ,CAAC,CAAC;AACjC,IAAM,aAAa,GAAG,OAAO,CAAC,yBAAyB,CAAC,CAAC;AACzD,+BAA+B;AAC/B,MAAM,CAAC,SAAS,CAAC,EAAE,OAAO,EAAE,IAAI,aAAa,EAAE,EAAE,CAAC,CAAC;AAGnD,QAAQ,CAAC,qBAAqB,EAAE;IAC5B,EAAE,CAAC,mBAAmB,EAAE;QACtB,IAAM,IAAI,GAAG,6BAAQ,CAAC,MAAM,CAC1B,8BAAC,kBAAK,OAAE,CACT,CAAC,MAAM,EAAE,CAAC;QACX,MAAM,CAAC,IAAI,CAAC,CAAC,eAAe,EAAE,CAAC;IACjC,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC;AAEL,kDAAkD;AAClD,kCAAkC;AAClC,uEAAuE;AACvE,2DAA2D;AAC3D,qEAAqE;AACrE,2DAA2D;AAC3D,SAAS;AACT,KAAK;AACL,2CAA2C;AAC3C,8CAA8C;AAC9C,uEAAuE;AACvE,2DAA2D;AAC3D,qEAAqE;AACrE,SAAS;AACT,KAAK;AACL,4BAA4B;AAC5B,gDAAgD;AAChD,qDAAqD;AACrD,yDAAyD;AACzD,UAAU;AACV,MAAM;AAEN,+CAA+C;AAE/C,oDAAoD;AACpD,eAAe;AACf,yBAAyB;AACzB,+BAA+B;AAE/B,qDAAqD;AACrD,0EAA0E;AAC1E,wBAAwB;AACxB,QAAQ;AACR,IAAI;AACJ,IAAI;AACJ,gBAAgB;AAChB,IAAI;AACJ,4BAA4B;AAC5B,gDAAgD;AAChD,kDAAkD;AAClD,KAAK;AAGL,uBAAuB;AAEvB,yDAAyD;AACzD,eAAe;AAEf,yBAAyB;AACzB,+BAA+B;AAE/B,qDAAqD;AAErD,+EAA+E;AAC/E,wBAAwB;AACxB,QAAQ;AACR,IAAI;AACJ,IAAI;AACJ,gBAAgB;AAChB,IAAI;AACJ,kCAAkC;AAClC,gDAAgD;AAChD,uDAAuD;AACvD,KAAK","names":[],"sources":["/Users/sakthivel/Documents/GitHub/MyAwesomeProject/Container/LoginScr.test.tsx"],"sourcesContent":["import React from 'react';\nimport { shallow, mount } from 'enzyme';\nimport login from './LoginScr'\nimport Login from './LoginScr';\nimport renderer from 'react-test-renderer'\nconst Enzyme = require('enzyme');\nconst EnzymeAdapter = require('enzyme-adapter-react-16');\n// Setup enzyme's react adapter\nEnzyme.configure({ adapter: new EnzymeAdapter() });\nimport { render } from '@testing-library/react-native';\n\ndescribe('SnapShot login Page', () => {\n    it('renders correctly', () => {\n      const tree = renderer.create(\n        <Login/>\n      ).toJSON();\n      expect(tree).toMatchSnapshot();\n    });\n  });\n\n// describe('Test case for testing login', () => {\n//     test('email check', () => {\n//         const instanceOf = renderer.create(<Login />).getInstance();\n//         instanceOf.handleInputChange(\"sakthi@gmail.com\")\n//         expect(instanceOf.state.email).toEqual(\"sakthi@gmail.com\")\n//         expect(instanceOf.state.email).not.toEqual(null)\n//     })\n// })\n// describe('Test case text input', () => {\n//     test('email valid email check', () => {\n//         const instanceOf = renderer.create(<Login />).getInstance();\n//         instanceOf.handleInputChange(\"sakthi@gmail.com\")\n//         expect(instanceOf.state.email).toEqual(\"sakthi@gmail.com\")\n//     })\n// })\n// describe('Hello', () => {\n//     it('displays the passed-in name', () => {\n//         const { queryByText } = render(<Login />);\n//         expect(queryByText('WelCome')).not.toBeNull();\n//     });\n// });\n\n// // Finding Element is present or not present\n\n// let findElement = function(tree:any,element:any){\n//     debugger\n// var result = undefined\n// for (node in tree.children){\n    \n//     for (newnode in tree.children[node].children){\n//     if (tree.children[node].children[newnode].props.testID == element){\n//         result = true\n//     }\n// }\n// }\n// return result\n// }\n// it (\"findElement\", () =>{\n// let tree = renderer.create(<Login/>).toJSON()\n// expect(findElement(tree,\"email\")).toBeDefined()\n// })\n\n\n// // Check PlaceHolder\n\n// let checkPlaceHolder = function(tree:any,element:any){\n//     debugger\n\n// var result = undefined\n// for (node in tree.children){\n    \n//     for (newnode in tree.children[node].children){\n        \n//     if (tree.children[node].children[newnode].props.placeholder == element){\n//         result = true\n//     }\n// }\n// }\n// return result\n// }\n// it (\"Check PlaceHolder\", () =>{\n// let tree = renderer.create(<Login/>).toJSON()\n// expect(checkPlaceHolder(tree,\"Email\")).toBeDefined()\n// })"],"version":3}