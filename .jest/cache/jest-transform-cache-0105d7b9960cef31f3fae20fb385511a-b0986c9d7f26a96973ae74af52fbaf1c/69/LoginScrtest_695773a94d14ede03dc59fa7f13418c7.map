{"file":"/Users/sakthivel/Documents/GitHub/MyAwesomeProject/Container/LoginScr.test.tsx","mappings":"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","names":[],"sources":["/Users/sakthivel/Documents/GitHub/MyAwesomeProject/Container/LoginScr.test.tsx"],"sourcesContent":["import React from 'react';\nimport Login from './LoginScr';\nimport renderer from 'react-test-renderer'\nimport {shallow} from \"enzyme\"\nimport {render, cleanup, fireEvent,waitForElement } from '@testing-library/react';\nconst Enzyme = require('enzyme');\nconst EnzymeAdapter = require('enzyme-adapter-react-16');\n// Setup enzyme's react adapter\nEnzyme.configure({ adapter: new EnzymeAdapter() });\n\ndescribe('SnapShot login Page', () => {\n    it('renders correctly', () => {\n      const tree = renderer.create(\n        <Login/>\n      ).toJSON();\n      expect(tree).toMatchSnapshot();\n    });\n  });\n\n\n  // Finding Email text Field is present\n\nlet findElement = function(tree:any,element:any){\n    debugger\nvar result = undefined\nfor (let node in tree.children){\n    \n    for (let newnode in tree.children[node].children){\n    if (tree.children[node].children[newnode].props.testID == element){\n        result = true\n    }\n}\n}\nreturn result\n}\nit (\"Check Email Text filed is present\", () =>{\nlet tree = renderer.create(<Login/>).toJSON()\nexpect(findElement(tree,\"email\")).toBeDefined()\n})\n\n\n\n// Validate the Placeholder of the email text field\n\nlet checkPlaceHolder = function(tree:any,element:any){\n    debugger\n\nvar result = undefined\nfor (let node in tree.children){\n    \n    for (let newnode in tree.children[node].children){\n        \n    if (tree.children[node].children[newnode].props.placeholder == element){\n        result = true\n    }\n}\n}\nreturn result\n}\nit (\"Validate the Placeholder of the email text field\", () =>{\nlet tree = renderer.create(<Login/>).toJSON()\nexpect(checkPlaceHolder(tree,\"Email\")).toBeDefined()\n})\n\n\n // Finding Password text Field is present\n\n let findPassWordElement = function(tree:any,element:any){\n    debugger\nvar result = undefined\nfor (let node in tree.children){\n    \n    for (let newnode in tree.children[node].children){\n    if (tree.children[node].children[newnode].props.testID == element){\n        result = true\n    }\n}\n}\nreturn result\n}\nit (\"Finding Password text Field is present\", () =>{\nlet tree = renderer.create(<Login/>).toJSON()\nexpect(findPassWordElement(tree,\"password\")).toBeDefined()\n})\n\n\n\n// Validate the placeHolder of the password text field\n\nlet checkPasswordPlaceHolder = function(tree:any,element:any){\n    debugger\n\nvar result = undefined\nfor (let node in tree.children){\n    \n    for (let newnode in tree.children[node].children){\n        \n    if (tree.children[node].children[newnode].props.placeholder == element){\n        result = true\n    }\n}\n}\nreturn result\n}\nit (\"Validate the placeHolder of the password text field\", () =>{\nlet tree = renderer.create(<Login/>).toJSON()\nexpect(checkPasswordPlaceHolder(tree,\"Password\")).toBeDefined()\n})\n\nit('should render without throwing an error', function() {\n    const wrapper = shallow(<Login/>);\n    wrapper.dive().find(\"[testID='refreshButton']\").simulate(\"press\");\n  });\n// // Button click Action\n// it('increments counter after 0.5s', async () => {\n//     const { getByTestId, getByText } = render(<Login/>); \n\n//     fireEvent.click(getByTestId('button-up'))\n\n//     const counter = await waitForElement(() => getByText('1')) \n\n//     expect(counter).tohavetext\n//   });\n// describe('Email State Check', () => {\n//     test('It Should Change the state of the email', () => {\n//         const instanceOf = renderer.create(<Login />).getInstance();\n//         if (instanceOf !== null){\n//         instanceOf.handleInputChange(\"sakthi@gmail.com\")\n//         expect(instanceOf.state.email).toEqual(\"sakthi@gmail.com\")\n//         expect(instanceOf.state.email).not.toEqual(null)\n//         }\n//     })\n// })\n// describe('Test case text input', () => {\n//     test('email valid email check', () => {\n//         const instanceOf = renderer.create(<Login />).getInstance();\n//         instanceOf.handleInputChange(\"sakthi@gmail.com\")\n//         expect(instanceOf.state.email).toEqual(\"sakthi@gmail.com\")\n//     })\n// })\n// describe('Hello', () => {\n//     it('displays the passed-in name', () => {\n//         const { queryByText } = render(<Login />);\n//         expect(queryByText('WelCome')).not.toBeNull();\n//     });\n// });\n\n\n\n\n"],"version":3}