50645b385816f62f1e843e9cbf895745
'use strict';

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.Commands = void 0;

var _requireNativeComponent = _interopRequireDefault(require("../../ReactNative/requireNativeComponent"));

var _codegenNativeCommands = _interopRequireDefault(require("../../Utilities/codegenNativeCommands"));

var React = _interopRequireWildcard(require("react"));

var _AndroidTextInputViewConfig = _interopRequireDefault(require("./AndroidTextInputViewConfig"));

var ReactNativeViewConfigRegistry = require('../../Renderer/shims/ReactNativeViewConfigRegistry');

var Commands = (0, _codegenNativeCommands.default)({
  supportedCommands: ['focus', 'blur', 'setTextAndSelection']
});
exports.Commands = Commands;
var AndroidTextInputNativeComponent;

if (global.RN$Bridgeless) {
  ReactNativeViewConfigRegistry.register('AndroidTextInput', function () {
    return _AndroidTextInputViewConfig.default;
  });
  AndroidTextInputNativeComponent = 'AndroidTextInput';
} else {
  AndroidTextInputNativeComponent = (0, _requireNativeComponent.default)('AndroidTextInput');
}

var _default = AndroidTextInputNativeComponent;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,