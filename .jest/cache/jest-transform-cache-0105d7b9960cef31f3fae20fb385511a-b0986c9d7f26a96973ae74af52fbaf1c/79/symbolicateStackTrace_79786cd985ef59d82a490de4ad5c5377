b9d67434624e14be20854d9da660917b
'use strict';

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _NativeSourceCode = _interopRequireDefault(require("../../NativeModules/specs/NativeSourceCode"));

var getDevServer = require('./getDevServer');

var fetch;

function isSourcedFromDisk(sourcePath) {
  return !/^http/.test(sourcePath) && /[\\/]/.test(sourcePath);
}

function symbolicateStackTrace(stack) {
  var devServer, stackCopy, _NativeSourceCode$get, scriptURL, foundInternalSource, response;

  return _regenerator.default.async(function symbolicateStackTrace$(_context) {
    while (1) {
      switch (_context.prev = _context.next) {
        case 0:
          if (!fetch) {
            fetch = global.fetch || require('../../Network/fetch').fetch;
          }

          devServer = getDevServer();

          if (devServer.bundleLoadedFromServer) {
            _context.next = 4;
            break;
          }

          throw new Error('Bundle was not loaded from the packager');

        case 4:
          stackCopy = stack;
          _NativeSourceCode$get = _NativeSourceCode.default.getConstants(), scriptURL = _NativeSourceCode$get.scriptURL;

          if (scriptURL) {
            foundInternalSource = false;
            stackCopy = stack.map(function (frame) {
              if (frame.file == null) {
                return frame;
              }

              if (!foundInternalSource && isSourcedFromDisk(frame.file)) {
                return (0, _extends2.default)({}, frame, {
                  file: scriptURL
                });
              }

              foundInternalSource = true;
              return frame;
            });
          }

          _context.next = 9;
          return _regenerator.default.awrap(fetch(devServer.url + 'symbolicate', {
            method: 'POST',
            body: JSON.stringify({
              stack: stackCopy
            })
          }));

        case 9:
          response = _context.sent;
          _context.next = 12;
          return _regenerator.default.awrap(response.json());

        case 12:
          return _context.abrupt("return", _context.sent);

        case 13:
        case "end":
          return _context.stop();
      }
    }
  }, null, null, null, Promise);
}

module.exports = symbolicateStackTrace;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInN5bWJvbGljYXRlU3RhY2tUcmFjZS5qcyJdLCJuYW1lcyI6WyJnZXREZXZTZXJ2ZXIiLCJyZXF1aXJlIiwiZmV0Y2giLCJpc1NvdXJjZWRGcm9tRGlzayIsInNvdXJjZVBhdGgiLCJ0ZXN0Iiwic3ltYm9saWNhdGVTdGFja1RyYWNlIiwic3RhY2siLCJnbG9iYWwiLCJkZXZTZXJ2ZXIiLCJidW5kbGVMb2FkZWRGcm9tU2VydmVyIiwiRXJyb3IiLCJzdGFja0NvcHkiLCJOYXRpdmVTb3VyY2VDb2RlIiwiZ2V0Q29uc3RhbnRzIiwic2NyaXB0VVJMIiwiZm91bmRJbnRlcm5hbFNvdXJjZSIsIm1hcCIsImZyYW1lIiwiZmlsZSIsInVybCIsIm1ldGhvZCIsImJvZHkiLCJKU09OIiwic3RyaW5naWZ5IiwicmVzcG9uc2UiLCJqc29uIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJtYXBwaW5ncyI6IkFBVUE7Ozs7Ozs7O0FBSUE7O0FBRkEsSUFBTUEsWUFBWSxHQUFHQyxPQUFPLENBQUMsZ0JBQUQsQ0FBNUI7O0FBS0EsSUFBSUMsS0FBSjs7QUFtQkEsU0FBU0MsaUJBQVQsQ0FBMkJDLFVBQTNCLEVBQXdEO0FBQ3RELFNBQU8sQ0FBQyxRQUFRQyxJQUFSLENBQWFELFVBQWIsQ0FBRCxJQUE2QixRQUFRQyxJQUFSLENBQWFELFVBQWIsQ0FBcEM7QUFDRDs7QUFFRCxTQUFlRSxxQkFBZixDQUNFQyxLQURGO0FBQUE7O0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFjRSxjQUFJLENBQUNMLEtBQUwsRUFBWTtBQUNWQSxZQUFBQSxLQUFLLEdBQUdNLE1BQU0sQ0FBQ04sS0FBUCxJQUFnQkQsT0FBTyxDQUFDLHFCQUFELENBQVAsQ0FBK0JDLEtBQXZEO0FBQ0Q7O0FBRUtPLFVBQUFBLFNBbEJSLEdBa0JvQlQsWUFBWSxFQWxCaEM7O0FBQUEsY0FtQk9TLFNBQVMsQ0FBQ0Msc0JBbkJqQjtBQUFBO0FBQUE7QUFBQTs7QUFBQSxnQkFvQlUsSUFBSUMsS0FBSixDQUFVLHlDQUFWLENBcEJWOztBQUFBO0FBdUJNQyxVQUFBQSxTQXZCTixHQXVCa0JMLEtBdkJsQjtBQUFBLGtDQXlCc0JNLDBCQUFpQkMsWUFBakIsRUF6QnRCLEVBeUJTQyxTQXpCVCx5QkF5QlNBLFNBekJUOztBQTBCRSxjQUFJQSxTQUFKLEVBQWU7QUFDVEMsWUFBQUEsbUJBRFMsR0FDc0IsS0FEdEI7QUFFYkosWUFBQUEsU0FBUyxHQUFHTCxLQUFLLENBQUNVLEdBQU4sQ0FBVSxVQUFDQyxLQUFELEVBQXVCO0FBQzNDLGtCQUFJQSxLQUFLLENBQUNDLElBQU4sSUFBYyxJQUFsQixFQUF3QjtBQUN0Qix1QkFBT0QsS0FBUDtBQUNEOztBQU1ELGtCQUFJLENBQUNGLG1CQUFELElBQXdCYixpQkFBaUIsQ0FBQ2UsS0FBSyxDQUFDQyxJQUFQLENBQTdDLEVBQTJEO0FBRXpELGtEQUFXRCxLQUFYO0FBQWtCQyxrQkFBQUEsSUFBSSxFQUFFSjtBQUF4QjtBQUNEOztBQUVEQyxjQUFBQSxtQkFBbUIsR0FBRyxJQUF0QjtBQUNBLHFCQUFPRSxLQUFQO0FBQ0QsYUFoQlcsQ0FBWjtBQWlCRDs7QUE3Q0g7QUFBQSw0Q0ErQ3lCaEIsS0FBSyxDQUFDTyxTQUFTLENBQUNXLEdBQVYsR0FBZ0IsYUFBakIsRUFBZ0M7QUFDMURDLFlBQUFBLE1BQU0sRUFBRSxNQURrRDtBQUUxREMsWUFBQUEsSUFBSSxFQUFFQyxJQUFJLENBQUNDLFNBQUwsQ0FBZTtBQUFDakIsY0FBQUEsS0FBSyxFQUFFSztBQUFSLGFBQWY7QUFGb0QsV0FBaEMsQ0EvQzlCOztBQUFBO0FBK0NRYSxVQUFBQSxRQS9DUjtBQUFBO0FBQUEsNENBbURlQSxRQUFRLENBQUNDLElBQVQsRUFuRGY7O0FBQUE7QUFBQTs7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTs7QUFzREFDLE1BQU0sQ0FBQ0MsT0FBUCxHQUFpQnRCLHFCQUFqQiIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ29weXJpZ2h0IChjKSBGYWNlYm9vaywgSW5jLiBhbmQgaXRzIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICogQGZvcm1hdFxuICogQGZsb3dcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbmNvbnN0IGdldERldlNlcnZlciA9IHJlcXVpcmUoJy4vZ2V0RGV2U2VydmVyJyk7XG5cbmltcG9ydCBOYXRpdmVTb3VyY2VDb2RlIGZyb20gJy4uLy4uL05hdGl2ZU1vZHVsZXMvc3BlY3MvTmF0aXZlU291cmNlQ29kZSc7XG5cbi8vIEF2b2lkIHJlcXVpcmluZyBmZXRjaCBvbiBsb2FkIG9mIHRoaXMgbW9kdWxlOyBzZWUgc3ltYm9saWNhdGVTdGFja1RyYWNlXG5sZXQgZmV0Y2g7XG5cbmltcG9ydCB0eXBlIHtTdGFja0ZyYW1lfSBmcm9tICcuLi9OYXRpdmVFeGNlcHRpb25zTWFuYWdlcic7XG5cbmV4cG9ydCB0eXBlIENvZGVGcmFtZSA9ICRSZWFkT25seTx7fFxuICBjb250ZW50OiBzdHJpbmcsXG4gIGxvY2F0aW9uOiA/e1xuICAgIHJvdzogbnVtYmVyLFxuICAgIGNvbHVtbjogbnVtYmVyLFxuICAgIC4uLlxuICB9LFxuICBmaWxlTmFtZTogc3RyaW5nLFxufH0+O1xuXG5leHBvcnQgdHlwZSBTeW1ib2xpY2F0ZWRTdGFja1RyYWNlID0gJFJlYWRPbmx5PHt8XG4gIHN0YWNrOiBBcnJheTxTdGFja0ZyYW1lPixcbiAgY29kZUZyYW1lOiA/Q29kZUZyYW1lLFxufH0+O1xuXG5mdW5jdGlvbiBpc1NvdXJjZWRGcm9tRGlzayhzb3VyY2VQYXRoOiBzdHJpbmcpOiBib29sZWFuIHtcbiAgcmV0dXJuICEvXmh0dHAvLnRlc3Qoc291cmNlUGF0aCkgJiYgL1tcXFxcL10vLnRlc3Qoc291cmNlUGF0aCk7XG59XG5cbmFzeW5jIGZ1bmN0aW9uIHN5bWJvbGljYXRlU3RhY2tUcmFjZShcbiAgc3RhY2s6IEFycmF5PFN0YWNrRnJhbWU+LFxuKTogUHJvbWlzZTxTeW1ib2xpY2F0ZWRTdGFja1RyYWNlPiB7XG4gIC8vIFJOIGN1cnJlbnRseSBsYXp5IGxvYWRzIHdoYXR3Zy1mZXRjaCB1c2luZyBhIGN1c3RvbSBmZXRjaCBtb2R1bGUsIHdoaWNoLFxuICAvLyB3aGVuIGNhbGxlZCBmb3IgdGhlIGZpcnN0IHRpbWUsIHJlcXVpcmVzIGFuZCByZS1leHBvcnRzICd3aGF0d2ctZmV0Y2gnLlxuICAvLyBIb3dldmVyLCB3aGVuIGEgZGVwZW5kZW5jeSBvZiB0aGUgcHJvamVjdCB0cmllcyB0byByZXF1aXJlIHdoYXR3Zy1mZXRjaFxuICAvLyBlaXRoZXIgZGlyZWN0bHkgb3IgaW5kaXJlY3RseSwgd2hhdHdnLWZldGNoIGlzIHJlcXVpcmVkIGJlZm9yZVxuICAvLyBSTiBjYW4gbGF6eSBsb2FkIHdoYXR3Zy1mZXRjaC4gQXMgd2hhdHdnLWZldGNoIGNoZWNrc1xuICAvLyBmb3IgYSBmZXRjaCBwb2x5ZmlsbCBiZWZvcmUgbG9hZGluZywgaXQgd2lsbCBpbiB0dXJuIHRyeSB0byBsb2FkXG4gIC8vIFJOJ3MgZmV0Y2ggbW9kdWxlLCB3aGljaCBpbW1lZGlhdGVseSB0cmllcyB0byBpbXBvcnQgd2hhdHdnLWZldGNoIEFHQUlOLlxuICAvLyBUaGlzIGNhdXNlcyBhIGNpcmN1bGFyIHJlcXVpcmUgd2hpY2ggcmVzdWx0cyBpbiBSTidzIGZldGNoIG1vZHVsZVxuICAvLyBleHBvcnRpbmcgZmV0Y2ggYXMgJ3VuZGVmaW5lZCcuXG4gIC8vIFRoZSBmaXggYmVsb3cgcG9zdHBvbmVzIHRyeWluZyB0byBsb2FkIGZldGNoIHVudGlsIHRoZSBmaXJzdCBjYWxsIHRvIHN5bWJvbGljYXRlU3RhY2tUcmFjZS5cbiAgLy8gQXQgdGhhdCB0aW1lLCB3ZSB3aWxsIGhhdmUgZWl0aGVyIGdsb2JhbC5mZXRjaCAod2hhdHdnLWZldGNoKSBvciBSTidzIGZldGNoLlxuICBpZiAoIWZldGNoKSB7XG4gICAgZmV0Y2ggPSBnbG9iYWwuZmV0Y2ggfHwgcmVxdWlyZSgnLi4vLi4vTmV0d29yay9mZXRjaCcpLmZldGNoO1xuICB9XG5cbiAgY29uc3QgZGV2U2VydmVyID0gZ2V0RGV2U2VydmVyKCk7XG4gIGlmICghZGV2U2VydmVyLmJ1bmRsZUxvYWRlZEZyb21TZXJ2ZXIpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ0J1bmRsZSB3YXMgbm90IGxvYWRlZCBmcm9tIHRoZSBwYWNrYWdlcicpO1xuICB9XG5cbiAgbGV0IHN0YWNrQ29weSA9IHN0YWNrO1xuXG4gIGNvbnN0IHtzY3JpcHRVUkx9ID0gTmF0aXZlU291cmNlQ29kZS5nZXRDb25zdGFudHMoKTtcbiAgaWYgKHNjcmlwdFVSTCkge1xuICAgIGxldCBmb3VuZEludGVybmFsU291cmNlOiBib29sZWFuID0gZmFsc2U7XG4gICAgc3RhY2tDb3B5ID0gc3RhY2subWFwKChmcmFtZTogU3RhY2tGcmFtZSkgPT4ge1xuICAgICAgaWYgKGZyYW1lLmZpbGUgPT0gbnVsbCkge1xuICAgICAgICByZXR1cm4gZnJhbWU7XG4gICAgICB9XG5cbiAgICAgIC8vIElmIHRoZSBzb3VyY2VzIGV4aXN0IG9uIGRpc2sgcmF0aGVyIHRoYW4gYXBwZWFyaW5nIHRvIGNvbWUgZnJvbSB0aGUgcGFja2FnZXIsXG4gICAgICAvLyByZXBsYWNlIHRoZSBsb2NhdGlvbiB3aXRoIHRoZSBwYWNrYWdlciBVUkwgdW50aWwgd2UgcmVhY2ggYW4gaW50ZXJuYWwgc291cmNlXG4gICAgICAvLyB3aGljaCBkb2VzIG5vdCBoYXZlIGEgcGF0aCAobm8gc2xhc2hlcyksIGluZGljYXRpbmcgYSBzd2l0Y2ggZnJvbSB3aXRoaW5cbiAgICAgIC8vIHRoZSBhcHBsaWNhdGlvbiB0byBhIHN1cnJvdW5kaW5nIGRlYnVnZ2luZyBlbnZpcm9ubWVudC5cbiAgICAgIGlmICghZm91bmRJbnRlcm5hbFNvdXJjZSAmJiBpc1NvdXJjZWRGcm9tRGlzayhmcmFtZS5maWxlKSkge1xuICAgICAgICAvLyBDb3B5IGZyYW1lIGludG8gbmV3IG9iamVjdCBhbmQgcmVwbGFjZSAnZmlsZScgcHJvcGVydHlcbiAgICAgICAgcmV0dXJuIHsuLi5mcmFtZSwgZmlsZTogc2NyaXB0VVJMfTtcbiAgICAgIH1cblxuICAgICAgZm91bmRJbnRlcm5hbFNvdXJjZSA9IHRydWU7XG4gICAgICByZXR1cm4gZnJhbWU7XG4gICAgfSk7XG4gIH1cblxuICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGZldGNoKGRldlNlcnZlci51cmwgKyAnc3ltYm9saWNhdGUnLCB7XG4gICAgbWV0aG9kOiAnUE9TVCcsXG4gICAgYm9keTogSlNPTi5zdHJpbmdpZnkoe3N0YWNrOiBzdGFja0NvcHl9KSxcbiAgfSk7XG4gIHJldHVybiBhd2FpdCByZXNwb25zZS5qc29uKCk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gc3ltYm9saWNhdGVTdGFja1RyYWNlO1xuIl19