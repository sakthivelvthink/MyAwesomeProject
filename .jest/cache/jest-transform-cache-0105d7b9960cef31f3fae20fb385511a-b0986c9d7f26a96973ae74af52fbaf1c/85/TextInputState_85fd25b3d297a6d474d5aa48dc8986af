589b513dbca52efc595b0a83693e40ae
'use strict';

var _AndroidTextInputNativeComponent = require("../../Components/TextInput/AndroidTextInputNativeComponent");

var _RCTSingelineTextInputNativeComponent = require("../../Components/TextInput/RCTSingelineTextInputNativeComponent");

var React = require('react');

var Platform = require('../../Utilities/Platform');

var _require = require('../../Renderer/shims/ReactNative'),
    findNodeHandle = _require.findNodeHandle;

var currentlyFocusedInputRef = null;
var inputs = new Set();

function currentlyFocusedInput() {
  return currentlyFocusedInputRef;
}

function currentlyFocusedField() {
  if (__DEV__) {
    console.error('currentlyFocusedField is deprecated and will be removed in a future release. Use currentlyFocusedInput');
  }

  return findNodeHandle(currentlyFocusedInputRef);
}

function focusInput(textField) {
  if (currentlyFocusedInputRef !== textField && textField != null) {
    currentlyFocusedInputRef = textField;
  }
}

function blurInput(textField) {
  if (currentlyFocusedInputRef === textField && textField != null) {
    currentlyFocusedInputRef = null;
  }
}

function focusField(textFieldID) {
  if (__DEV__) {
    console.error('focusField no longer works. Use focusInput');
  }

  return;
}

function blurField(textFieldID) {
  if (__DEV__) {
    console.error('blurField no longer works. Use blurInput');
  }

  return;
}

function focusTextInput(textField) {
  if (typeof textField === 'number') {
    if (__DEV__) {
      console.error('focusTextInput must be called with a host component. Passing a react tag is deprecated.');
    }

    return;
  }

  if (currentlyFocusedInputRef !== textField && textField != null) {
    focusInput(textField);

    if (Platform.OS === 'ios') {
      _RCTSingelineTextInputNativeComponent.Commands.focus(textField);
    } else if (Platform.OS === 'android') {
      _AndroidTextInputNativeComponent.Commands.focus(textField);
    }
  }
}

function blurTextInput(textField) {
  if (typeof textField === 'number') {
    if (__DEV__) {
      console.error('focusTextInput must be called with a host component. Passing a react tag is deprecated.');
    }

    return;
  }

  if (currentlyFocusedInputRef === textField && textField != null) {
    blurInput(textField);

    if (Platform.OS === 'ios') {
      _RCTSingelineTextInputNativeComponent.Commands.blur(textField);
    } else if (Platform.OS === 'android') {
      _AndroidTextInputNativeComponent.Commands.blur(textField);
    }
  }
}

function registerInput(textField) {
  if (typeof textField === 'number') {
    if (__DEV__) {
      console.error('registerInput must be called with a host component. Passing a react tag is deprecated.');
    }

    return;
  }

  inputs.add(textField);
}

function unregisterInput(textField) {
  if (typeof textField === 'number') {
    if (__DEV__) {
      console.error('unregisterInput must be called with a host component. Passing a react tag is deprecated.');
    }

    return;
  }

  inputs.delete(textField);
}

function isTextInput(textField) {
  if (typeof textField === 'number') {
    if (__DEV__) {
      console.error('isTextInput must be called with a host component. Passing a react tag is deprecated.');
    }

    return false;
  }

  return inputs.has(textField);
}

module.exports = {
  currentlyFocusedInput: currentlyFocusedInput,
  focusInput: focusInput,
  blurInput: blurInput,
  currentlyFocusedField: currentlyFocusedField,
  focusField: focusField,
  blurField: blurField,
  focusTextInput: focusTextInput,
  blurTextInput: blurTextInput,
  registerInput: registerInput,
  unregisterInput: unregisterInput,
  isTextInput: isTextInput
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIlRleHRJbnB1dFN0YXRlLmpzIl0sIm5hbWVzIjpbIlJlYWN0IiwicmVxdWlyZSIsIlBsYXRmb3JtIiwiZmluZE5vZGVIYW5kbGUiLCJjdXJyZW50bHlGb2N1c2VkSW5wdXRSZWYiLCJpbnB1dHMiLCJTZXQiLCJjdXJyZW50bHlGb2N1c2VkSW5wdXQiLCJjdXJyZW50bHlGb2N1c2VkRmllbGQiLCJfX0RFVl9fIiwiY29uc29sZSIsImVycm9yIiwiZm9jdXNJbnB1dCIsInRleHRGaWVsZCIsImJsdXJJbnB1dCIsImZvY3VzRmllbGQiLCJ0ZXh0RmllbGRJRCIsImJsdXJGaWVsZCIsImZvY3VzVGV4dElucHV0IiwiT1MiLCJpT1NUZXh0SW5wdXRDb21tYW5kcyIsImZvY3VzIiwiQW5kcm9pZFRleHRJbnB1dENvbW1hbmRzIiwiYmx1clRleHRJbnB1dCIsImJsdXIiLCJyZWdpc3RlcklucHV0IiwiYWRkIiwidW5yZWdpc3RlcklucHV0IiwiZGVsZXRlIiwiaXNUZXh0SW5wdXQiLCJoYXMiLCJtb2R1bGUiLCJleHBvcnRzIl0sIm1hcHBpbmdzIjoiQUFjQTs7QUFLQTs7QUFDQTs7QUFKQSxJQUFNQSxLQUFLLEdBQUdDLE9BQU8sQ0FBQyxPQUFELENBQXJCOztBQUNBLElBQU1DLFFBQVEsR0FBR0QsT0FBTyxDQUFDLDBCQUFELENBQXhCOztlQUN5QkEsT0FBTyxDQUFDLGtDQUFELEM7SUFBekJFLGMsWUFBQUEsYzs7QUFPUCxJQUFJQyx3QkFBdUMsR0FBRyxJQUE5QztBQUNBLElBQU1DLE1BQU0sR0FBRyxJQUFJQyxHQUFKLEVBQWY7O0FBRUEsU0FBU0MscUJBQVQsR0FBZ0Q7QUFDOUMsU0FBT0gsd0JBQVA7QUFDRDs7QUFNRCxTQUFTSSxxQkFBVCxHQUEwQztBQUN4QyxNQUFJQyxPQUFKLEVBQWE7QUFDWEMsSUFBQUEsT0FBTyxDQUFDQyxLQUFSLENBQ0Usd0dBREY7QUFHRDs7QUFFRCxTQUFPUixjQUFjLENBQUNDLHdCQUFELENBQXJCO0FBQ0Q7O0FBRUQsU0FB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TUFBSSxPQUFPQSxTQUFQLEtBQXFCLFFBQXpCLEVBQW1DO0FBQ2pDLFFBQUlKLE9BQUosRUFBYTtBQUNYQyxNQUFBQSxPQUFPLENBQUNDLEtBQVIsQ0FDRSxzRkFERjtBQUdEOztBQUVELFdBQU8sS0FBUDtBQUNEOztBQUVELFNBQU9OLE1BQU0sQ0FBQ3lCLEdBQVAsQ0FBV2pCLFNBQVgsQ0FBUDtBQUNEOztBQUVEa0IsTUFBTSxDQUFDQyxPQUFQLEdBQWlCO0FBQ2Z6QixFQUFBQSxxQkFBcUIsRUFBckJBLHFCQURlO0FBRWZLLEVBQUFBLFVBQVUsRUFBVkEsVUFGZTtBQUdmRSxFQUFBQSxTQUFTLEVBQVRBLFNBSGU7QUFLZk4sRUFBQUEscUJBQXFCLEVBQXJCQSxxQkFMZTtBQU1mTyxFQUFBQSxVQUFVLEVBQVZBLFVBTmU7QUFPZkUsRUFBQUEsU0FBUyxFQUFUQSxTQVBlO0FBUWZDLEVBQUFBLGNBQWMsRUFBZEEsY0FSZTtBQVNmSyxFQUFBQSxhQUFhLEVBQWJBLGFBVGU7QUFVZkUsRUFBQUEsYUFBYSxFQUFiQSxhQVZlO0FBV2ZFLEVBQUFBLGVBQWUsRUFBZkEsZUFYZTtBQVlmRSxFQUFBQSxXQUFXLEVBQVhBO0FBWmUsQ0FBakIiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIENvcHlyaWdodCAoYykgRmFjZWJvb2ssIEluYy4gYW5kIGl0cyBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqIEBmb3JtYXRcbiAqIEBmbG93IHN0cmljdC1sb2NhbFxuICovXG5cbi8vIFRoaXMgY2xhc3MgaXMgcmVzcG9uc2libGUgZm9yIGNvb3JkaW5hdGluZyB0aGUgXCJmb2N1c2VkXCIgc3RhdGUgZm9yXG4vLyBUZXh0SW5wdXRzLiBBbGwgY2FsbHMgcmVsYXRpbmcgdG8gdGhlIGtleWJvYXJkIHNob3VsZCBiZSBmdW5uZWxlZFxuLy8gdGhyb3VnaCBoZXJlLlxuXG4ndXNlIHN0cmljdCc7XG5cbmNvbnN0IFJlYWN0ID0gcmVxdWlyZSgncmVhY3QnKTtcbmNvbnN0IFBsYXRmb3JtID0gcmVxdWlyZSgnLi4vLi4vVXRpbGl0aWVzL1BsYXRmb3JtJyk7XG5jb25zdCB7ZmluZE5vZGVIYW5kbGV9ID0gcmVxdWlyZSgnLi4vLi4vUmVuZGVyZXIvc2hpbXMvUmVhY3ROYXRpdmUnKTtcbmltcG9ydCB7Q29tbWFuZHMgYXMgQW5kcm9pZFRleHRJbnB1dENvbW1hbmRzfSBmcm9tICcuLi8uLi9Db21wb25lbnRzL1RleHRJbnB1dC9BbmRyb2lkVGV4dElucHV0TmF0aXZlQ29tcG9uZW50JztcbmltcG9ydCB7Q29tbWFuZHMgYXMgaU9TVGV4dElucHV0Q29tbWFuZHN9IGZyb20gJy4uLy4uL0NvbXBvbmVudHMvVGV4dElucHV0L1JDVFNpbmdlbGluZVRleHRJbnB1dE5hdGl2ZUNvbXBvbmVudCc7XG5cbmltcG9ydCB0eXBlIHtIb3N0Q29tcG9uZW50fSBmcm9tICcuLi8uLi9SZW5kZXJlci9zaGltcy9SZWFjdE5hdGl2ZVR5cGVzJztcbnR5cGUgQ29tcG9uZW50UmVmID0gUmVhY3QuRWxlbWVudFJlZjxIb3N0Q29tcG9uZW50PG1peGVkPj47XG5cbmxldCBjdXJyZW50bHlGb2N1c2VkSW5wdXRSZWY6ID9Db21wb25lbnRSZWYgPSBudWxsO1xuY29uc3QgaW5wdXRzID0gbmV3IFNldCgpO1xuXG5mdW5jdGlvbiBjdXJyZW50bHlGb2N1c2VkSW5wdXQoKTogP0NvbXBvbmVudFJlZiB7XG4gIHJldHVybiBjdXJyZW50bHlGb2N1c2VkSW5wdXRSZWY7XG59XG5cbi8qKlxuICogUmV0dXJucyB0aGUgSUQgb2YgdGhlIGN1cnJlbnRseSBmb2N1c2VkIHRleHQgZmllbGQsIGlmIG9uZSBleGlzdHNcbiAqIElmIG5vIHRleHQgZmllbGQgaXMgZm9jdXNlZCBpdCByZXR1cm5zIG51bGxcbiAqL1xuZnVuY3Rpb24gY3VycmVudGx5Rm9jdXNlZEZpZWxkKCk6ID9udW1iZXIge1xuICBpZiAoX19ERVZfXykge1xuICAgIGNvbnNvbGUuZXJyb3IoXG4gICAgICAnY3VycmVudGx5Rm9jdXNlZEZpZWxkIGlzIGRlcHJlY2F0ZWQgYW5kIHdpbGwgYmUgcmVtb3ZlZCBpbiBhIGZ1dHVyZSByZWxlYXNlLiBVc2UgY3VycmVudGx5Rm9jdXNlZElucHV0JyxcbiAgICApO1xuICB9XG5cbiAgcmV0dXJuIGZpbmROb2RlSGFuZGxlKGN1cnJlbnRseUZvY3VzZWRJbnB1dFJlZik7XG59XG5cbmZ1bmN0aW9uIGZvY3VzSW5wdXQodGV4dEZpZWxkOiA/Q29tcG9uZW50UmVmKTogdm9pZCB7XG4gIGlmIChjdXJyZW50bHlGb2N1c2VkSW5wdXRSZWYgIT09IHRleHRGaWVsZCAmJiB0ZXh0RmllbGQgIT0gbnVsbCkge1xuICAgIGN1cnJlbnRseUZvY3VzZWRJbnB1dFJlZiA9IHRleHRGaWVsZDtcbiAgfVxufVxuXG5mdW5jdGlvbiBibHVySW5wdXQodGV4dEZpZWxkOiA/Q29tcG9uZW50UmVmKTogdm9pZCB7XG4gIGlmIChjdXJyZW50bHlGb2N1c2VkSW5wdXRSZWYgPT09IHRleHRGaWVsZCAmJiB0ZXh0RmllbGQgIT0gbnVsbCkge1xuICAgIGN1cnJlbnRseUZvY3VzZWRJbnB1dFJlZiA9IG51bGw7XG4gIH1cbn1cblxuZnVuY3Rpb24gZm9jdXNGaWVsZCh0ZXh0RmllbGRJRDogP251bWJlcik6IHZvaWQge1xuICBpZiAoX19ERVZfXykge1xuICAgIGNvbnNvbGUuZXJyb3IoJ2ZvY3VzRmllbGQgbm8gbG9uZ2VyIHdvcmtzLiBVc2UgZm9jdXNJbnB1dCcpO1xuICB9XG5cbiAgcmV0dXJuO1xufVxuXG5mdW5jdGlvbiBibHVyRmllbGQodGV4dEZpZWxkSUQ6ID9udW1iZXIpIHtcbiAgaWYgKF9fREVWX18pIHtcbiAgICBjb25zb2xlLmVycm9yKCdibHVyRmllbGQgbm8gbG9uZ2VyIHdvcmtzLiBVc2UgYmx1cklucHV0Jyk7XG4gIH1cblxuICByZXR1cm47XG59XG5cbi8qKlxuICogQHBhcmFtIHtudW1iZXJ9IFRleHRJbnB1dElEIGlkIG9mIHRoZSB0ZXh0IGZpZWxkIHRvIGZvY3VzXG4gKiBGb2N1c2VzIHRoZSBzcGVjaWZpZWQgdGV4dCBmaWVsZFxuICogbm9vcCBpZiB0aGUgdGV4dCBmaWVsZCB3YXMgYWxyZWFkeSBmb2N1c2VkXG4gKi9cbmZ1bmN0aW9uIGZvY3VzVGV4dElucHV0KHRleHRGaWVsZDogP0NvbXBvbmVudFJlZikge1xuICBpZiAodHlwZW9mIHRleHRGaWVsZCA9PT0gJ251bWJlcicpIHtcbiAgICBpZiAoX19ERVZfXykge1xuICAgICAgY29uc29sZS5lcnJvcihcbiAgICAgICAgJ2ZvY3VzVGV4dElucHV0IG11c3QgYmUgY2FsbGVkIHdpdGggYSBob3N0IGNvbXBvbmVudC4gUGFzc2luZyBhIHJlYWN0IHRhZyBpcyBkZXByZWNhdGVkLicsXG4gICAgICApO1xuICAgIH1cblxuICAgIHJldHVybjtcbiAgfVxuXG4gIGlmIChjdXJyZW50bHlGb2N1c2VkSW5wdXRSZWYgIT09IHRleHRGaWVsZCAmJiB0ZXh0RmllbGQgIT0gbnVsbCkge1xuICAgIGZvY3VzSW5wdXQodGV4dEZpZWxkKTtcbiAgICBpZiAoUGxhdGZvcm0uT1MgPT09ICdpb3MnKSB7XG4gICAgICAvLyBUaGlzIGlzbid0IG5lY2Vzc2FyaWx5IGEgc2luZ2xlIGxpbmUgdGV4dCBpbnB1dFxuICAgICAgLy8gQnV0IGNvbW1hbmRzIGRvbid0IGFjdHVhbGx5IGNhcmUgYXMgbG9uZyBhcyB0aGUgdGhpbmcgYmVpbmcgcGFzc2VkIGluXG4gICAgICAvLyBhY3R1YWxseSBoYXMgYSBjb21tYW5kIHdpdGggdGhhdCBuYW1lLiBTbyB0aGlzIHNob3VsZCB3b3JrIHdpdGggc2luZ2xlXG4gICAgICAvLyBhbmQgbXVsdGlsaW5lIHRleHQgaW5wdXRzLiBJZGVhbGx5IHdlJ2xsIG1lcmdlIHRoZW0gaW50byBvbmUgY29tcG9uZW50XG4gICAgICAvLyBpbiB0aGUgZnV0dXJlLlxuICAgICAgaU9TVGV4dElucHV0Q29tbWFuZHMuZm9jdXModGV4dEZpZWxkKTtcbiAgICB9IGVsc2UgaWYgKFBsYXRmb3JtLk9TID09PSAnYW5kcm9pZCcpIHtcbiAgICAgIEFuZHJvaWRUZXh0SW5wdXRDb21tYW5kcy5mb2N1cyh0ZXh0RmllbGQpO1xuICAgIH1cbiAgfVxufVxuXG4vKipcbiAqIEBwYXJhbSB7bnVtYmVyfSB0ZXh0RmllbGRJRCBpZCBvZiB0aGUgdGV4dCBmaWVsZCB0byB1bmZvY3VzXG4gKiBVbmZvY3VzZXMgdGhlIHNwZWNpZmllZCB0ZXh0IGZpZWxkXG4gKiBub29wIGlmIGl0IHdhc24ndCBmb2N1c2VkXG4gKi9cbmZ1bmN0aW9uIGJsdXJUZXh0SW5wdXQodGV4dEZpZWxkOiA/Q29tcG9uZW50UmVmKSB7XG4gIGlmICh0eXBlb2YgdGV4dEZpZWxkID09PSAnbnVtYmVyJykge1xuICAgIGlmIChfX0RFVl9fKSB7XG4gICAgICBjb25zb2xlLmVycm9yKFxuICAgICAgICAnZm9jdXNUZXh0SW5wdXQgbXVzdCBiZSBjYWxsZWQgd2l0aCBhIGhvc3QgY29tcG9uZW50LiBQYXNzaW5nIGEgcmVhY3QgdGFnIGlzIGRlcHJlY2F0ZWQuJyxcbiAgICAgICk7XG4gICAgfVxuXG4gICAgcmV0dXJuO1xuICB9XG5cbiAgaWYgKGN1cnJlbnRseUZvY3VzZWRJbnB1dFJlZiA9PT0gdGV4dEZpZWxkICYmIHRleHRGaWVsZCAhPSBudWxsKSB7XG4gICAgYmx1cklucHV0KHRleHRGaWVsZCk7XG4gICAgaWYgKFBsYXRmb3JtLk9TID09PSAnaW9zJykge1xuICAgICAgLy8gVGhpcyBpc24ndCBuZWNlc3NhcmlseSBhIHNpbmdsZSBsaW5lIHRleHQgaW5wdXRcbiAgICAgIC8vIEJ1dCBjb21tYW5kcyBkb24ndCBhY3R1YWxseSBjYXJlIGFzIGxvbmcgYXMgdGhlIHRoaW5nIGJlaW5nIHBhc3NlZCBpblxuICAgICAgLy8gYWN0dWFsbHkgaGFzIGEgY29tbWFuZCB3aXRoIHRoYXQgbmFtZS4gU28gdGhpcyBzaG91bGQgd29yayB3aXRoIHNpbmdsZVxuICAgICAgLy8gYW5kIG11bHRpbGluZSB0ZXh0IGlucHV0cy4gSWRlYWxseSB3ZSdsbCBtZXJnZSB0aGVtIGludG8gb25lIGNvbXBvbmVudFxuICAgICAgLy8gaW4gdGhlIGZ1dHVyZS5cbiAgICAgIGlPU1RleHRJbnB1dENvbW1hbmRzLmJsdXIodGV4dEZpZWxkKTtcbiAgICB9IGVsc2UgaWYgKFBsYXRmb3JtLk9TID09PSAnYW5kcm9pZCcpIHtcbiAgICAgIEFuZHJvaWRUZXh0SW5wdXRDb21tYW5kcy5ibHVyKHRleHRGaWVsZCk7XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIHJlZ2lzdGVySW5wdXQodGV4dEZpZWxkOiBDb21wb25lbnRSZWYpIHtcbiAgaWYgKHR5cGVvZiB0ZXh0RmllbGQgPT09ICdudW1iZXInKSB7XG4gICAgaWYgKF9fREVWX18pIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoXG4gICAgICAgICdyZWdpc3RlcklucHV0IG11c3QgYmUgY2FsbGVkIHdpdGggYSBob3N0IGNvbXBvbmVudC4gUGFzc2luZyBhIHJlYWN0IHRhZyBpcyBkZXByZWNhdGVkLicsXG4gICAgICApO1xuICAgIH1cblxuICAgIHJldHVybjtcbiAgfVxuXG4gIGlucHV0cy5hZGQodGV4dEZpZWxkKTtcbn1cblxuZnVuY3Rpb24gdW5yZWdpc3RlcklucHV0KHRleHRGaWVsZDogQ29tcG9uZW50UmVmKSB7XG4gIGlmICh0eXBlb2YgdGV4dEZpZWxkID09PSAnbnVtYmVyJykge1xuICAgIGlmIChfX0RFVl9fKSB7XG4gICAgICBjb25zb2xlLmVycm9yKFxuICAgICAgICAndW5yZWdpc3RlcklucHV0IG11c3QgYmUgY2FsbGVkIHdpdGggYSBob3N0IGNvbXBvbmVudC4gUGFzc2luZyBhIHJlYWN0IHRhZyBpcyBkZXByZWNhdGVkLicsXG4gICAgICApO1xuICAgIH1cblxuICAgIHJldHVybjtcbiAgfVxuICBpbnB1dHMuZGVsZXRlKHRleHRGaWVsZCk7XG59XG5cbmZ1bmN0aW9uIGlzVGV4dElucHV0KHRleHRGaWVsZDogQ29tcG9uZW50UmVmKTogYm9vbGVhbiB7XG4gIGlmICh0eXBlb2YgdGV4dEZpZWxkID09PSAnbnVtYmVyJykge1xuICAgIGlmIChfX0RFVl9fKSB7XG4gICAgICBjb25zb2xlLmVycm9yKFxuICAgICAgICAnaXNUZXh0SW5wdXQgbXVzdCBiZSBjYWxsZWQgd2l0aCBhIGhvc3QgY29tcG9uZW50LiBQYXNzaW5nIGEgcmVhY3QgdGFnIGlzIGRlcHJlY2F0ZWQuJyxcbiAgICAgICk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgcmV0dXJuIGlucHV0cy5oYXModGV4dEZpZWxkKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIGN1cnJlbnRseUZvY3VzZWRJbnB1dCxcbiAgZm9jdXNJbnB1dCxcbiAgYmx1cklucHV0LFxuXG4gIGN1cnJlbnRseUZvY3VzZWRGaWVsZCxcbiAgZm9jdXNGaWVsZCxcbiAgYmx1ckZpZWxkLFxuICBmb2N1c1RleHRJbnB1dCxcbiAgYmx1clRleHRJbnB1dCxcbiAgcmVnaXN0ZXJJbnB1dCxcbiAgdW5yZWdpc3RlcklucHV0LFxuICBpc1RleHRJbnB1dCxcbn07XG4iXX0=