cf9b7874f7fa5f2033c2e13c34a0ba0b
'use strict';

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var AnimatedValue = require('./nodes/AnimatedValue');

var NativeAnimatedHelper = require('./NativeAnimatedHelper');

var ReactNative = require('../../Renderer/shims/ReactNative');

var invariant = require('invariant');

var _require = require('./NativeAnimatedHelper'),
    shouldUseNativeDriver = _require.shouldUseNativeDriver;

function attachNativeEvent(viewRef, eventName, argMapping) {
  var eventMappings = [];

  var traverse = function traverse(value, path) {
    if (value instanceof AnimatedValue) {
      value.__makeNative();

      eventMappings.push({
        nativeEventPath: path,
        animatedValueTag: value.__getNativeTag()
      });
    } else if (typeof value === 'object') {
      for (var _key in value) {
        traverse(value[_key], path.concat(_key));
      }
    }
  };

  invariant(argMapping[0] && argMapping[0].nativeEvent, 'Native driven events only support animated values contained inside `nativeEvent`.');
  traverse(argMapping[0].nativeEvent, []);
  var viewTag = ReactNative.findNodeHandle(viewRef);

  if (viewTag != null) {
    eventMappings.forEach(function (mapping) {
      NativeAnimatedHelper.API.addAnimatedEventToView(viewTag, eventName, mapping);
    });
  }

  return {
    detach: function detach() {
      if (viewTag != null) {
        eventMappings.forEach(function (mapping) {
          NativeAnimatedHelper.API.removeAnimatedEventFromView(viewTag, eventName, mapping.animatedValueTag);
        });
      }
    }
  };
}

function validateMapping(argMapping, args) {
  var validate = function validate(recMapping, recEvt, key) {
    if (recMapping instanceof AnimatedValue) {
      invariant(typeof recEvt === 'number', 'Bad mapping of event key ' + key + ', should be number but got ' + typeof recEvt);
      return;
    }

    if (typeof recEvt === 'number') {
      invariant(recMapping instanceof AnimatedValue, 'Bad mapping of type ' + typeof recMapping + ' for key ' + key + ', event value must map to AnimatedValue');
      return;
    }

    invariant(typeof recMapping === 'object', 'Bad mapping of type ' + typeof recMapping + ' for key ' + key);
    invariant(typeof recEvt === 'object', 'Bad event of type ' + typeof recEvt + ' for key ' + key);

    for (var mappingKey in recMapping) {
      validate(recMapping[mappingKey], recEvt[mappingKey], mappingKey);
    }
  };

  invariant(args.length >= argMapping.length, 'Event has less arguments than mapping');
  argMapping.forEach(function (mapping, idx) {
    validate(mapping, args[idx], 'arg' + idx);
  });
}

var AnimatedEvent = function () {
  function AnimatedEvent(argMapping, config) {
    (0, _classCallCheck2.default)(this, AnimatedEvent);
    this._listeners = [];
    this._argMapping = argMapping;

    if (config == null) {
      console.warn('Animated.event now requires a second argument for options');
      config = {
        useNativeDriver: false
      };
    }

    if (config.listener) {
      this.__addListener(config.listener);
    }

    this._callListeners = this._callListeners.bind(this);
    this._attachedEvent = null;
    this.__isNative = shouldUseNativeDriver(config);
  }

  (0, _createClass2.default)(AnimatedEvent, [{
    key: "__addListener",
    value: function __addListener(callback) {
      this._listeners.push(callback);
    }
  }, {
    key: "__removeListener",
    value: function __removeListener(callback) {
      this._listeners = this._listeners.filter(function (listener) {
        return listener !== callback;
      });
    }
  }, {
    key: "__attach",
    value: function __attach(viewRef, eventName) {
      invariant(this.__isNative, 'Only native driven events need to be attached.');
      this._attachedEvent = attachNativeEvent(viewRef, eventName, this._argMapping);
    }
  }, {
    key: "__detach",
    value: function __detach(viewTag, eventName) {
      invariant(this.__isNative, 'Only native driven events need to be detached.');
      this._attachedEvent && this._attachedEvent.detach();
    }
  }, {
    key: "__getHandler",
    value: function __getHandler() {
      var _this = this;

      if (this.__isNative) {
        if (__DEV__) {
          var _validatedMapping = false;
          return function () {
            for (var _len = arguments.length, args = new Array(_len), _key2 = 0; _key2 < _len; _key2++) {
              args[_key2] = arguments[_key2];
            }

            if (!_validatedMapping) {
              validateMapping(_this._argMapping, args);
              _validatedMapping = true;
            }

            _this._callListeners.apply(_this, args);
          };
        } else {
          return this._callListeners;
        }
      }

      var validatedMapping = false;
      return function () {
        for (var _len2 = arguments.length, args = new Array(_len2), _key3 = 0; _key3 < _len2; _key3++) {
          args[_key3] = arguments[_key3];
        }

        if (__DEV__ && !validatedMapping) {
          validateMapping(_this._argMapping, args);
          validatedMapping = true;
        }

        var traverse = function traverse(recMapping, recEvt, key) {
          if (recMapping instanceof AnimatedValue) {
            if (typeof recEvt === 'number') {
              recMapping.setValue(recEvt);
            }
          } else if (typeof recMapping === 'object') {
            for (var mappingKey in recMapping) {
              traverse(recMapping[mappingKey], recEvt[mappingKey], mappingKey);
            }
          }
        };

        _this._argMapping.forEach(function (mapping, idx) {
          traverse(mapping, args[idx], 'arg' + idx);
        });

        _this._callListeners.apply(_this, args);
      };
    }
  }, {
    key: "_callListeners",
    value: function _callListeners() {
      for (var _len3 = arguments.length, args = new Array(_len3), _key4 = 0; _key4 < _len3; _key4++) {
        args[_key4] = arguments[_key4];
      }

      this._listeners.forEach(function (listener) {
        return listener.apply(void 0, args);
      });
    }
  }]);
  return AnimatedEvent;
}();

module.exports = {
  AnimatedEvent: AnimatedEvent,
  attachNativeEvent: attachNativeEvent
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkFuaW1hdGVkRXZlbnQuanMiXSwibmFtZXMiOlsiQW5pbWF0ZWRWYWx1ZSIsInJlcXVpcmUiLCJOYXRpdmVBbmltYXRlZEhlbHBlciIsIlJlYWN0TmF0aXZlIiwiaW52YXJpYW50Iiwic2hvdWxkVXNlTmF0aXZlRHJpdmVyIiwiYXR0YWNoTmF0aXZlRXZlbnQiLCJ2aWV3UmVmIiwiZXZlbnROYW1lIiwiYXJnTWFwcGluZyIsImV2ZW50TWFwcGluZ3MiLCJ0cmF2ZXJzZSIsInZhbHVlIiwicGF0aCIsIl9fbWFrZU5hdGl2ZSIsInB1c2giLCJuYXRpdmVFdmVudFBhdGgiLCJhbmltYXRlZFZhbHVlVGFnIiwiX19nZXROYXRpdmVUYWciLCJrZXkiLCJjb25jYXQiLCJuYXRpdmVFdmVudCIsInZpZXdUYWciLCJmaW5kTm9kZUhhbmRsZSIsImZvckVhY2giLCJtYXBwaW5nIiwiQVBJIiwiYWRkQW5pbWF0ZWRFdmVudFRvVmlldyIsImRldGFjaCIsInJlbW92ZUFuaW1hdGVkRXZlbnRGcm9tVmlldyIsInZhbGlkYXRlTWFwcGluZyIsImFyZ3MiLCJ2YWxpZGF0ZSIsInJlY01hcHBpbmciLCJyZWNFdnQiLCJtYXBwaW5nS2V5IiwibGVuZ3RoIiwiaWR4IiwiQW5pbWF0ZWRFdmVudCIsImNvbmZpZyIsIl9saXN0ZW5lcnMiLCJfYXJnTWFwcGluZyIsImNvbnNvbGUiLCJ3YXJuIiwidXNlTmF0aXZlRHJpdmVyIiwibGlzdGVuZXIiLCJfX2FkZExpc3RlbmVyIiwiX2NhbGxMaXN0ZW5lcnMiLCJiaW5kIiwiX2F0dGFjaGVkRXZlbnQiLCJfX2lzTmF0aXZlIiwiY2FsbGJhY2siLCJmaWx0ZXIiLCJfX0RFVl9fIiwidmFsaWRhdGVkTWFwcGluZyIsInNldFZhbHVlIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJtYXBwaW5ncyI6IkFBVUE7Ozs7Ozs7O0FBRUEsSUFBTUEsYUFBYSxHQUFHQyxPQUFPLENBQUMsdUJBQUQsQ0FBN0I7O0FBQ0EsSUFBTUMsb0JBQW9CLEdBQUdELE9B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LFNBRkQ7O0FBSUEsUUFBQSxLQUFJLENBQUNVLGNBQUwsT0FBQSxLQUFJLEVBQW1CaEIsSUFBbkIsQ0FBSjtBQUNELE9BekJEO0FBMEJEOzs7cUNBRTRCO0FBQUEseUNBQVhBLElBQVc7QUFBWEEsUUFBQUEsSUFBVztBQUFBOztBQUMzQixXQUFLUyxVQUFMLENBQWdCaEIsT0FBaEIsQ0FBd0IsVUFBQXFCLFFBQVE7QUFBQSxlQUFJQSxRQUFRLE1BQVIsU0FBWWQsSUFBWixDQUFKO0FBQUEsT0FBaEM7QUFDRDs7Ozs7QUFHSHlCLE1BQU0sQ0FBQ0MsT0FBUCxHQUFpQjtBQUFDbkIsRUFBQUEsYUFBYSxFQUFiQSxhQUFEO0FBQWdCaEMsRUFBQUEsaUJBQWlCLEVBQWpCQTtBQUFoQixDQUFqQiIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ29weXJpZ2h0IChjKSBGYWNlYm9vaywgSW5jLiBhbmQgaXRzIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICogQGZsb3dcbiAqIEBmb3JtYXRcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbmNvbnN0IEFuaW1hdGVkVmFsdWUgPSByZXF1aXJlKCcuL25vZGVzL0FuaW1hdGVkVmFsdWUnKTtcbmNvbnN0IE5hdGl2ZUFuaW1hdGVkSGVscGVyID0gcmVxdWlyZSgnLi9OYXRpdmVBbmltYXRlZEhlbHBlcicpO1xuY29uc3QgUmVhY3ROYXRpdmUgPSByZXF1aXJlKCcuLi8uLi9SZW5kZXJlci9zaGltcy9SZWFjdE5hdGl2ZScpO1xuXG5jb25zdCBpbnZhcmlhbnQgPSByZXF1aXJlKCdpbnZhcmlhbnQnKTtcblxuY29uc3Qge3Nob3VsZFVzZU5hdGl2ZURyaXZlcn0gPSByZXF1aXJlKCcuL05hdGl2ZUFuaW1hdGVkSGVscGVyJyk7XG5cbmV4cG9ydCB0eXBlIE1hcHBpbmcgPSB7W2tleTogc3RyaW5nXTogTWFwcGluZywgLi4ufSB8IEFuaW1hdGVkVmFsdWU7XG5leHBvcnQgdHlwZSBFdmVudENvbmZpZyA9IHtcbiAgbGlzdGVuZXI/OiA/RnVuY3Rpb24sXG4gIHVzZU5hdGl2ZURyaXZlcjogYm9vbGVhbixcbn07XG5cbmZ1bmN0aW9uIGF0dGFjaE5hdGl2ZUV2ZW50KFxuICB2aWV3UmVmOiBhbnksXG4gIGV2ZW50TmFtZTogc3RyaW5nLFxuICBhcmdNYXBwaW5nOiAkUmVhZE9ubHlBcnJheTw/TWFwcGluZz4sXG4pOiB7ZGV0YWNoOiAoKSA9PiB2b2lkfSB7XG4gIC8vIEZpbmQgYW5pbWF0ZWQgdmFsdWVzIGluIGBhcmdNYXBwaW5nYCBhbmQgY3JlYXRlIGFuIGFycmF5IHJlcHJlc2VudGluZyB0aGVpclxuICAvLyBrZXkgcGF0aCBpbnNpZGUgdGhlIGBuYXRpdmVFdmVudGAgb2JqZWN0LiBFeC46IFsnY29udGVudE9mZnNldCcsICd4J10uXG4gIGNvbnN0IGV2ZW50TWFwcGluZ3MgPSBbXTtcblxuICBjb25zdCB0cmF2ZXJzZSA9ICh2YWx1ZSwgcGF0aCkgPT4ge1xuICAgIGlmICh2YWx1ZSBpbnN0YW5jZW9mIEFuaW1hdGVkVmFsdWUpIHtcbiAgICAgIHZhbHVlLl9fbWFrZU5hdGl2ZSgpO1xuXG4gICAgICBldmVudE1hcHBpbmdzLnB1c2goe1xuICAgICAgICBuYXRpdmVFdmVudFBhdGg6IHBhdGgsXG4gICAgICAgIGFuaW1hdGVkVmFsdWVUYWc6IHZhbHVlLl9fZ2V0TmF0aXZlVGFnKCksXG4gICAgICB9KTtcbiAgICB9IGVsc2UgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCcpIHtcbiAgICAgIGZvciAoY29uc3Qga2V5IGluIHZhbHVlKSB7XG4gICAgICAgIHRyYXZlcnNlKHZhbHVlW2tleV0sIHBhdGguY29uY2F0KGtleSkpO1xuICAgICAgfVxuICAgIH1cbiAgfTtcblxuICBpbnZhcmlhbnQoXG4gICAgYXJnTWFwcGluZ1swXSAmJiBhcmdNYXBwaW5nWzBdLm5hdGl2ZUV2ZW50LFxuICAgICdOYXRpdmUgZHJpdmVuIGV2ZW50cyBvbmx5IHN1cHBvcnQgYW5pbWF0ZWQgdmFsdWVzIGNvbnRhaW5lZCBpbnNpZGUgYG5hdGl2ZUV2ZW50YC4nLFxuICApO1xuXG4gIC8vIEFzc3VtZSB0aGF0IHRoZSBldmVudCBjb250YWluaW5nIGBuYXRpdmVFdmVudGAgaXMgYWx3YXlzIHRoZSBmaXJzdCBhcmd1bWVudC5cbiAgdHJhdmVyc2UoYXJnTWFwcGluZ1swXS5uYXRpdmVFdmVudCwgW10pO1xuXG4gIGNvbnN0IHZpZXdUYWcgPSBSZWFjdE5hdGl2ZS5maW5kTm9kZUhhbmRsZSh2aWV3UmVmKTtcbiAgaWYgKHZpZXdUYWcgIT0gbnVsbCkge1xuICAgIGV2ZW50TWFwcGluZ3MuZm9yRWFjaChtYXBwaW5nID0+IHtcbiAgICAgIE5hdGl2ZUFuaW1hdGVkSGVscGVyLkFQSS5hZGRBbmltYXRlZEV2ZW50VG9WaWV3KFxuICAgICAgICB2aWV3VGFnLFxuICAgICAgICBldmVudE5hbWUsXG4gICAgICAgIG1hcHBpbmcsXG4gICAgICApO1xuICAgIH0pO1xuICB9XG5cbiAgcmV0dXJuIHtcbiAgICBkZXRhY2goKSB7XG4gICAgICBpZiAodmlld1RhZyAhPSBudWxsKSB7XG4gICAgICAgIGV2ZW50TWFwcGluZ3MuZm9yRWFjaChtYXBwaW5nID0+IHtcbiAgICAgICAgICBOYXRpdmVBbmltYXRlZEhlbHBlci5BUEkucmVtb3ZlQW5pbWF0ZWRFdmVudEZyb21WaWV3KFxuICAgICAgICAgICAgdmlld1RhZyxcbiAgICAgICAgICAgIGV2ZW50TmFtZSxcbiAgICAgICAgICAgIG1hcHBpbmcuYW5pbWF0ZWRWYWx1ZVRhZyxcbiAgICAgICAgICApO1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9LFxuICB9O1xufVxuXG5mdW5jdGlvbiB2YWxpZGF0ZU1hcHBpbmcoYXJnTWFwcGluZywgYXJncykge1xuICBjb25zdCB2YWxpZGF0ZSA9IChyZWNNYXBwaW5nLCByZWNFdnQsIGtleSkgPT4ge1xuICAgIGlmIChyZWNNYXBwaW5nIGluc3RhbmNlb2YgQW5pbWF0ZWRWYWx1ZSkge1xuICAgICAgaW52YXJpYW50KFxuICAgICAgICB0eXBlb2YgcmVjRXZ0ID09PSAnbnVtYmVyJyxcbiAgICAgICAgJ0JhZCBtYXBwaW5nIG9mIGV2ZW50IGtleSAnICtcbiAgICAgICAgICBrZXkgK1xuICAgICAgICAgICcsIHNob3VsZCBiZSBudW1iZXIgYnV0IGdvdCAnICtcbiAgICAgICAgICB0eXBlb2YgcmVjRXZ0LFxuICAgICAgKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgaWYgKHR5cGVvZiByZWNFdnQgPT09ICdudW1iZXInKSB7XG4gICAgICBpbnZhcmlhbnQoXG4gICAgICAgIHJlY01hcHBpbmcgaW5zdGFuY2VvZiBBbmltYXRlZFZhbHVlLFxuICAgICAgICAnQmFkIG1hcHBpbmcgb2YgdHlwZSAnICtcbiAgICAgICAgICB0eXBlb2YgcmVjTWFwcGluZyArXG4gICAgICAgICAgJyBmb3Iga2V5ICcgK1xuICAgICAgICAgIGtleSArXG4gICAgICAgICAgJywgZXZlbnQgdmFsdWUgbXVzdCBtYXAgdG8gQW5pbWF0ZWRWYWx1ZScsXG4gICAgICApO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBpbnZhcmlhbnQoXG4gICAgICB0eXBlb2YgcmVjTWFwcGluZyA9PT0gJ29iamVjdCcsXG4gICAgICAnQmFkIG1hcHBpbmcgb2YgdHlwZSAnICsgdHlwZW9mIHJlY01hcHBpbmcgKyAnIGZvciBrZXkgJyArIGtleSxcbiAgICApO1xuICAgIGludmFyaWFudChcbiAgICAgIHR5cGVvZiByZWNFdnQgPT09ICdvYmplY3QnLFxuICAgICAgJ0JhZCBldmVudCBvZiB0eXBlICcgKyB0eXBlb2YgcmVjRXZ0ICsgJyBmb3Iga2V5ICcgKyBrZXksXG4gICAgKTtcbiAgICBmb3IgKGNvbnN0IG1hcHBpbmdLZXkgaW4gcmVjTWFwcGluZykge1xuICAgICAgdmFsaWRhdGUocmVjTWFwcGluZ1ttYXBwaW5nS2V5XSwgcmVjRXZ0W21hcHBpbmdLZXldLCBtYXBwaW5nS2V5KTtcbiAgICB9XG4gIH07XG5cbiAgaW52YXJpYW50KFxuICAgIGFyZ3MubGVuZ3RoID49IGFyZ01hcHBpbmcubGVuZ3RoLFxuICAgICdFdmVudCBoYXMgbGVzcyBhcmd1bWVudHMgdGhhbiBtYXBwaW5nJyxcbiAgKTtcbiAgYXJnTWFwcGluZy5mb3JFYWNoKChtYXBwaW5nLCBpZHgpID0+IHtcbiAgICB2YWxpZGF0ZShtYXBwaW5nLCBhcmdzW2lkeF0sICdhcmcnICsgaWR4KTtcbiAgfSk7XG59XG5cbmNsYXNzIEFuaW1hdGVkRXZlbnQge1xuICBfYXJnTWFwcGluZzogJFJlYWRPbmx5QXJyYXk8P01hcHBpbmc+O1xuICBfbGlzdGVuZXJzOiBBcnJheTxGdW5jdGlvbj4gPSBbXTtcbiAgX2NhbGxMaXN0ZW5lcnM6IEZ1bmN0aW9uO1xuICBfYXR0YWNoZWRFdmVudDogP3tkZXRhY2g6ICgpID0+IHZvaWQsIC4uLn07XG4gIF9faXNOYXRpdmU6IGJvb2xlYW47XG5cbiAgY29uc3RydWN0b3IoYXJnTWFwcGluZzogJFJlYWRPbmx5QXJyYXk8P01hcHBpbmc+LCBjb25maWc6IEV2ZW50Q29uZmlnKSB7XG4gICAgdGhpcy5fYXJnTWFwcGluZyA9IGFyZ01hcHBpbmc7XG5cbiAgICBpZiAoY29uZmlnID09IG51bGwpIHtcbiAgICAgIGNvbnNvbGUud2FybignQW5pbWF0ZWQuZXZlbnQgbm93IHJlcXVpcmVzIGEgc2Vjb25kIGFyZ3VtZW50IGZvciBvcHRpb25zJyk7XG4gICAgICBjb25maWcgPSB7dXNlTmF0aXZlRHJpdmVyOiBmYWxzZX07XG4gICAgfVxuXG4gICAgaWYgKGNvbmZpZy5saXN0ZW5lcikge1xuICAgICAgdGhpcy5fX2FkZExpc3RlbmVyKGNvbmZpZy5saXN0ZW5lcik7XG4gICAgfVxuICAgIHRoaXMuX2NhbGxMaXN0ZW5lcnMgPSB0aGlzLl9jYWxsTGlzdGVuZXJzLmJpbmQodGhpcyk7XG4gICAgdGhpcy5fYXR0YWNoZWRFdmVudCA9IG51bGw7XG4gICAgdGhpcy5fX2lzTmF0aXZlID0gc2hvdWxkVXNlTmF0aXZlRHJpdmVyKGNvbmZpZyk7XG4gIH1cblxuICBfX2FkZExpc3RlbmVyKGNhbGxiYWNrOiBGdW5jdGlvbik6IHZvaWQge1xuICAgIHRoaXMuX2xpc3RlbmVycy5wdXNoKGNhbGxiYWNrKTtcbiAgfVxuXG4gIF9fcmVtb3ZlTGlzdGVuZXIoY2FsbGJhY2s6IEZ1bmN0aW9uKTogdm9pZCB7XG4gICAgdGhpcy5fbGlzdGVuZXJzID0gdGhpcy5fbGlzdGVuZXJzLmZpbHRlcihsaXN0ZW5lciA9PiBsaXN0ZW5lciAhPT0gY2FsbGJhY2spO1xuICB9XG5cbiAgX19hdHRhY2godmlld1JlZjogYW55LCBldmVudE5hbWU6IHN0cmluZykge1xuICAgIGludmFyaWFudChcbiAgICAgIHRoaXMuX19pc05hdGl2ZSxcbiAgICAgICdPbmx5IG5hdGl2ZSBkcml2ZW4gZXZlbnRzIG5lZWQgdG8gYmUgYXR0YWNoZWQuJyxcbiAgICApO1xuXG4gICAgdGhpcy5fYXR0YWNoZWRFdmVudCA9IGF0dGFjaE5hdGl2ZUV2ZW50KFxuICAgICAgdmlld1JlZixcbiAgICAgIGV2ZW50TmFtZSxcbiAgICAgIHRoaXMuX2FyZ01hcHBpbmcsXG4gICAgKTtcbiAgfVxuXG4gIF9fZGV0YWNoKHZpZXdUYWc6IGFueSwgZXZlbnROYW1lOiBzdHJpbmcpIHtcbiAgICBpbnZhcmlhbnQoXG4gICAgICB0aGlzLl9faXNOYXRpdmUsXG4gICAgICAnT25seSBuYXRpdmUgZHJpdmVuIGV2ZW50cyBuZWVkIHRvIGJlIGRldGFjaGVkLicsXG4gICAgKTtcblxuICAgIHRoaXMuX2F0dGFjaGVkRXZlbnQgJiYgdGhpcy5fYXR0YWNoZWRFdmVudC5kZXRhY2goKTtcbiAgfVxuXG4gIF9fZ2V0SGFuZGxlcigpOiBhbnkgfCAoKC4uLmFyZ3M6IGFueSkgPT4gdm9pZCkge1xuICAgIGlmICh0aGlzLl9faXNOYXRpdmUpIHtcbiAgICAgIGlmIChfX0RFVl9fKSB7XG4gICAgICAgIGxldCB2YWxpZGF0ZWRNYXBwaW5nID0gZmFsc2U7XG4gICAgICAgIHJldHVybiAoLi4uYXJnczogYW55KSA9PiB7XG4gICAgICAgICAgaWYgKCF2YWxpZGF0ZWRNYXBwaW5nKSB7XG4gICAgICAgICAgICB2YWxpZGF0ZU1hcHBpbmcodGhpcy5fYXJnTWFwcGluZywgYXJncyk7XG4gICAgICAgICAgICB2YWxpZGF0ZWRNYXBwaW5nID0gdHJ1ZTtcbiAgICAgICAgICB9XG4gICAgICAgICAgdGhpcy5fY2FsbExpc3RlbmVycyguLi5hcmdzKTtcbiAgICAgICAgfTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9jYWxsTGlzdGVuZXJzO1xuICAgICAgfVxuICAgIH1cblxuICAgIGxldCB2YWxpZGF0ZWRNYXBwaW5nID0gZmFsc2U7XG4gICAgcmV0dXJuICguLi5hcmdzOiBhbnkpID0+IHtcbiAgICAgIGlmIChfX0RFVl9fICYmICF2YWxpZGF0ZWRNYXBwaW5nKSB7XG4gICAgICAgIHZhbGlkYXRlTWFwcGluZyh0aGlzLl9hcmdNYXBwaW5nLCBhcmdzKTtcbiAgICAgICAgdmFsaWRhdGVkTWFwcGluZyA9IHRydWU7XG4gICAgICB9XG5cbiAgICAgIGNvbnN0IHRyYXZlcnNlID0gKHJlY01hcHBpbmcsIHJlY0V2dCwga2V5KSA9PiB7XG4gICAgICAgIGlmIChyZWNNYXBwaW5nIGluc3RhbmNlb2YgQW5pbWF0ZWRWYWx1ZSkge1xuICAgICAgICAgIGlmICh0eXBlb2YgcmVjRXZ0ID09PSAnbnVtYmVyJykge1xuICAgICAgICAgICAgcmVjTWFwcGluZy5zZXRWYWx1ZShyZWNFdnQpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIGlmICh0eXBlb2YgcmVjTWFwcGluZyA9PT0gJ29iamVjdCcpIHtcbiAgICAgICAgICBmb3IgKGNvbnN0IG1hcHBpbmdLZXkgaW4gcmVjTWFwcGluZykge1xuICAgICAgICAgICAgLyogJEZsb3dGaXhNZSg+PTAuMTIwLjApIFRoaXMgY29tbWVudCBzdXBwcmVzc2VzIGFuIGVycm9yIGZvdW5kXG4gICAgICAgICAgICAgKiB3aGVuIEZsb3cgdjAuMTIwIHdhcyBkZXBsb3llZC4gVG8gc2VlIHRoZSBlcnJvciwgZGVsZXRlIHRoaXNcbiAgICAgICAgICAgICAqIGNvbW1lbnQgYW5kIHJ1biBGbG93LiAqL1xuICAgICAgICAgICAgdHJhdmVyc2UocmVjTWFwcGluZ1ttYXBwaW5nS2V5XSwgcmVjRXZ0W21hcHBpbmdLZXldLCBtYXBwaW5nS2V5KTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgICB0aGlzLl9hcmdNYXBwaW5nLmZvckVhY2goKG1hcHBpbmcsIGlkeCkgPT4ge1xuICAgICAgICB0cmF2ZXJzZShtYXBwaW5nLCBhcmdzW2lkeF0sICdhcmcnICsgaWR4KTtcbiAgICAgIH0pO1xuXG4gICAgICB0aGlzLl9jYWxsTGlzdGVuZXJzKC4uLmFyZ3MpO1xuICAgIH07XG4gIH1cblxuICBfY2FsbExpc3RlbmVycyguLi5hcmdzOiBhbnkpIHtcbiAgICB0aGlzLl9saXN0ZW5lcnMuZm9yRWFjaChsaXN0ZW5lciA9PiBsaXN0ZW5lciguLi5hcmdzKSk7XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSB7QW5pbWF0ZWRFdmVudCwgYXR0YWNoTmF0aXZlRXZlbnR9O1xuIl19